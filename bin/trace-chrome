#!/usr/bin/env node

'use strict';

const {program} = require('commander');
const traceChrome = require('../lib/trace-chrome');

program
    .option('-H, --host <host>', 'Remote debugging protocol host', 'localhost')
    .option('-p, --port <port>', 'Remote debugging protocool port', '9876')
    .option('-s, --showcategories', 'Show categories')
    .option('-O, --output <path>', 'Output file', '')
    .option('-c, --categories <categories>', 'Set categories', '')
    .option('-e, --excludecategories <categories>', 'Exclude categories', '')
    .option('--systrace', 'Enable systrace')
    .option('--memory_dump_mode <mode>', 'Memory dump mode', '')
    .option('--memory_dump_interval <interval_in_ms>',
        'Memory dump interval in ms', 2000)
    .option('--dump_memory_at_stop')
    .parse(process.argv);

const cliOptions = program.opts();

function traceConfigFromCliOptions(opts) {
  const result = {
    dump_memory_mode: opts.memory_dump_mode,
    dump_memory_at_stop: opts.dump_memory_at_stop,
    dump_memory_interval: opts.memory_dump_interval,
    output_file: opts.output,
    trace_params: {traceConfig: {}, streamFormat: 'json'},
  };

  if (opts.categories) {
    console.error('Categories: ' + opts.categories);
    result.trace_params.traceConfig['includedCategories'] =
      opts.categories.split(',');
  }
  if (opts.excludecategories) {
    console.error('Excluded categories: ' + opts.excludecategories);
    result.trace_params.traceConfig['excludedCategories'] =
      opts.excludecategories.split(',');
  }
  if (opts.systrace) {
    console.error('Systrace enabled');
    result.trace_params.traceConfig['enableSystrace'] = true;
  }
  if (opts.memory_dump_mode) {
    console.error('Memory dump enabled. Mode ' + opts.memory_dump_mode +
      '. Interval ' + opts.memory_dump_interval + 'ms');
    if (!result.trace_params.traceConfig['includedCategories']) {
      result.trace_params.traceConfig['includedCategories'] = ['*'];
    }
    result.trace_params.traceConfig['includedCategories'].push(
        'disabled-by-default-memory-infra');
  }
  return result;
}

traceChrome.setCriOptions(cliOptions.host, cliOptions.port);

if (cliOptions.showcategories) {
  traceChrome.showCategories();
} else {
  const traceConfig = traceConfigFromCliOptions(cliOptions);
  traceChrome.captureTrace(traceConfig);
}
